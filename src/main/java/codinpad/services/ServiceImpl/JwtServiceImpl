package codinpad.services.ServiceImpl;

import java.security.Key;
import java.util.Date;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Service
public class JwtServiceImpl implements JwtService
{
    public String genrateToken(UserDetails userdetails)
    {
         return Jwts.builder().setSubject(userdetails.getUsername())
                  .setIssuedAt(new Date(System.currentTimeMillis()))
                  .setExpiration(new Date(System.currentTimeMillis()+1000*60*24*4))
                  .signWith(getSigninKey(), SignatureAlgorithm.HS256)
                  .compact();
    }


    public String extractUsername(String token)
    {
       return extractClaims(token, Claims::getSubject);
    }
    private Key getSigninKey()
    {
       byte[] key = Decoders.BASE64.decode("a7b8c2d35d42f1e7b3e6f8d5a4d0a9f1b8a3d3b8c0bfe7d9f5c8d7d4e7c6e1a7");
       return Keys.hmacShaKeyFor(key);
    }

    private <T> T extractClaims(String token, Function<Claims, T> claimsResolvers)
    {
        final Claims claims = extractAllClaims(token);
        return claimsResolvers.apply(claims);
    }

    private Claims extractAllClaims(String token)
    {
        return Jwts.parserBuilder().setSigningKey(getSigninKey()).build().parseClaimsJws(token).getBody();
    }

    public boolean isTokenValid(String token, UserDetails userDetails)
    {
       final String username = extractUsername(token);
       return (username.equals(userDetails.getUsername())) && !isTokenExpired(token);
    }

    private boolean isTokenExpired(String token)
    {
        return extractClaims(token, Claims::getExpiration).before(new Date());
    }
}